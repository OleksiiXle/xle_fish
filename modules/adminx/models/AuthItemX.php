<?php

namespace app\modules\adminx\models;

use Yii;

/**
 * This is the model class for table "auth_item".
 *
 * @property string $name
 * @property int $type
 * @property string $description
 * @property string $rule_name
 * @property resource $data
 * @property int $created_at
 * @property int $updated_at
 *
 * @property AuthItemX[] $children
 * @property AuthItemX[] $parents
 */
class AuthItemX extends \yii\db\ActiveRecord
{
    const TYPE_ROLE = 1;
    const TYPE_PERMISSION = 2;
    const TYPE_ROUTE = 3;
    const TYPE_All = 0;

    const NAME_PATTERN       = '/^[a-zA-Z0-9_\-]+$/ui'; //--маска для пароля
    const NAME_ERROR_MESSAGE = 'Припустимі символи - латиниця, цифри - та _'; //--сообщение об ошибке

    const DESCRIPTION_PATTERN       = '/^[a-zA-Z а-яА-ЯёЁЇїІіЄєҐґ0-9\-:"().,№\'_]+$/ui'; //--маска для названия компании
    const DESCRIPTION_ERROR_MESSAGE = 'Допустимые символы - буквы, цифры, пробел, кавычки, " : . , ( ) _ №" '; //--сообщение об ошибке



    public static $typeDict = [
       self::TYPE_ROLE => 'Ролі',
       self::TYPE_PERMISSION => 'Дозвіли',
       self::TYPE_ROUTE => 'Маршрути',
       self::TYPE_All => 'Всі типи',

    ];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'auth_item';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'type'], 'required'],
            [['name'], 'unique'],
            [['name'], 'match', 'pattern' => self::NAME_PATTERN, 'message' => self::NAME_ERROR_MESSAGE,],
            [['description'], 'match', 'pattern' => self::DESCRIPTION_PATTERN, 'message' => self::DESCRIPTION_ERROR_MESSAGE,],
            [['name', 'rule_name'], 'string', 'min' => 5, 'max' => 64],
            [['description'], 'string', 'max' => 255],
            [['type', 'created_at', 'updated_at'], 'integer'],
        //  [['rule_name'], 'exist', 'skipOnError' => true, 'targetClass' => Aut::className(), 'targetAttribute' => ['rule_name' => 'name']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'name' => 'Найменування',
            'type' => 'Тип',
            'description' => 'Опис',
            'rule_name' => 'Правило',
            'data' => 'Data',
            'created_at' => 'Створено',
            'updated_at' => 'Змінено',
        ];
    }


    //************* ПЕРЕОПЕРДЕЛЕННЫЕ МЕТОДЫ
    public function beforeSave($insert){
        $this->updated_at = time();
        if ($insert) $this->created_at = time();
       // $this->rule_name = ($this->rule_name == 'Без правила') ? null : $this->rule_name;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function save($runValidation = true, $attributeNames = null) {
        if ($this->validate()) {
            $manager = Yii::$app->authManager;
            if ($this->type == self::TYPE_ROLE) {
                $item = $manager->createRole($this->name);
            } else {
                $item = $manager->createPermission($this->name);
            }
            $item->name = $this->name;
            $item->description = $this->description;
            $item->ruleName = ($this->rule_name == 'Без правила') ? null : $this->rule_name;
            //  $item->data = $this->data === null || $this->data === '' ? null : Json::decode($this->data);

            if ($this->isNewRecord){
                $manager->add($item);
            } else {
                $oldName = $this->getOldAttribute('name');
                $manager->update($oldName, $item);
            }
            return true;
        } else {
            return false;
        }
    }

    public static function getRulesList(){
        $rules = \Yii::$app->authManager->getRules();
        $ret['Без правила'] = 'Без правила';
        foreach ($rules as $rule){
            $ret[$rule->name] =$rule->name;
        }
       return $ret;

    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChildren()
    {
        return $this->hasMany(AuthItemX::class, ['name' => 'child'])->viaTable('auth_item_child', ['parent' => 'name']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParents()
    {
        return $this->hasMany(AuthItemX::class, ['name' => 'parent'])->viaTable('auth_item_child', ['child' => 'name']);
    }

    /**
     * +++ Получение ролей, разрешений и маршрутов итема (роль или разрешение)
     * @return array
     */
    public static function getItemsXle($type, $name)
    {
        $manager = Yii::$app->getAuthManager();
        $result['assigned']['Roles']=[];
        $result['avaliable']['Roles']=[];
        switch ($type){
            case self::TYPE_ROLE:
                //--  роли
                $assigned     = array_keys($manager->getChildRoles($name));
                $avaliableAll = array_keys($manager->getRoles());
                $avaliable    = array_diff($avaliableAll , $assigned);
                $result['assigned']['Roles']=$assigned;
                $result['avaliable']['Roles']=$avaliable;
            case self::TYPE_PERMISSION:
                //-- разрешения
                $buffAssigned     = array_keys($manager->getPermissionsByRole($name));
                $buffAvaliableAll = array_keys($manager->getPermissions());
                $assignedPermissions = $assignedRoutes =[];
                $avaliablePermissions = $avaliableRoutes =[];
                foreach ($buffAssigned as $name) {
                    if ($name[0] != '/') {
                        $assignedPermissions[] = $name;
                    } else {
                        $assignedRoutes[] = $name;
                    }
                }

                foreach ($buffAvaliableAll as $name) {
                    if ($name[0] != '/') {
                        $avaliablePermissions[] = $name;
                    } else {
                        $avaliableRoutes[] = $name;
                    }
                }
                $result['assigned']['Permissions']=$assignedPermissions;
                $result['avaliable']['Permissions']=array_diff($avaliablePermissions , $assignedPermissions);
                $result['assigned']['Routes']=$assignedRoutes;
                $result['avaliable']['Routes']=array_diff($avaliableRoutes , $assignedRoutes);


                break;
        }

        return $result;
    }




}
